Zachary Weishampel	
zaw4


Question 1: are the benchmark timings for StringStrand consistent with the explanation below that the time to execute cutAndSplice is O(b2S)? 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.591	1290
StringStrand:	            512	      4,965,591	0.641	1290
StringStrand:	          1,024	      5,295,831	0.594	1290
StringStrand:	          2,048	      5,956,311	0.675	1290
StringStrand:	          4,096	      7,277,271	0.846	1290
StringStrand:	          8,192	      9,919,191	1.219	1290
StringStrand:	         16,384	     15,203,031	1.974	1290
StringStrand:	         32,768	     25,770,711	3.530	1290
StringStrand:	         65,536	     46,906,071	6.890	1290
StringStrand:	        131,072	     89,176,791	19.588	1290
StringStrand:	        262,144	    173,718,231	37.378	1290
StringStrand:	        524,288	    342,801,111	83.744	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space


Yes my data does agree with the explanation below concerning the time. Due to StringStrand working using concatenations, a 
new string has to be made every time a splice and edit is made. This causes the program to take an insane amount of memory and time when
more splices are made. This is highlighted in the data. The 524,288 splices took much more time than the smaller amount of splices. This agrees with the
given complexity order. Due to b^2 being constant, each time the splice is doubled (32,768 to 65,536) the time also seems to double (3.530 to 6.890).

Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to execute cutAndSplice is O(bS)? 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.026	1290
StringBuilderStrand:	            512	      4,965,591	0.018	1290
StringBuilderStrand:	          1,024	      5,295,831	0.009	1290
StringBuilderStrand:	          2,048	      5,956,311	0.007	1290
StringBuilderStrand:	          4,096	      7,277,271	0.007	1290
StringBuilderStrand:	          8,192	      9,919,191	0.010	1290
StringBuilderStrand:	         16,384	     15,203,031	0.009	1290
StringBuilderStrand:	         32,768	     25,770,711	0.021	1290
StringBuilderStrand:	         65,536	     46,906,071	0.059	1290
StringBuilderStrand:	        131,072	     89,176,791	0.068	1290
StringBuilderStrand:	        262,144	    173,718,231	0.173	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

This data somewhat agrees with the complexity and the explanation. Instead of using concatenation, StringBuilderStrand appends each splice. This is
why the time is much smaller than String Strand. Due to b being constant, only the number of Splices changes the time. This is why when the splice doubles
the time also gets close to doubling. While this data is actually sometimes inconsistent (e.g., the time is greater for 256 splices than 512 splices), there are some
data points that agree with the explanation, as evident by the time somewhat doubling from 32,768 splices to 65,536 splices. 

Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark program. Explain why you think memory is exhausted at the specific strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.019	1290
LinkStrand:	            512	      4,965,591	0.016	1290
LinkStrand:	          1,024	      5,295,831	0.003	1290
LinkStrand:	          2,048	      5,956,311	0.006	1290
LinkStrand:	          4,096	      7,277,271	0.003	1290
LinkStrand:	          8,192	      9,919,191	0.003	1290
LinkStrand:	         16,384	     15,203,031	0.005	1290
LinkStrand:	         32,768	     25,770,711	0.003	1290
LinkStrand:	         65,536	     46,906,071	0.005	1290
LinkStrand:	        131,072	     89,176,791	0.003	1290
LinkStrand:	        262,144	    173,718,231	0.003	1290
LinkStrand:	        524,288	    342,801,111	0.005	1290
LinkStrand:	      1,048,576	    680,966,871	0.005	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.005	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.005	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.003	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.006	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.003	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.005	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.003	1290
LinkStrand:	    536,870,912	346,286,373,591	0.004	1290

This also agrees with the explanation. The time does not change as much because instead of making a new string like that of StringStrand or StringBuilder String.
It creates a node that the original strand just points to. This means that it only runs through the DNA strand once. This is why the time is much smaller and consistent compared to the
others. The memory is also exhausted at a much larger splice amount compared to the others for a similar reason. For the LinkStrand method it does not have to create a whole new String of the entire DNA strand. Instead it only has
to create a new node. It can even use preexisting nodes. This is why the LinkStrand can run through so many more splices. 